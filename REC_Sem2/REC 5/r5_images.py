###################################
# Image and Pixels representation #
###################################

from random import randint
from tkinter import *
from PIL import Image

def _pxl(val): #Checks for proper inputs, will learn later on
    if not isinstance(val, int):
        raise TypeError("Color must be integer") 
    if not 0 <= val <= 255:
        raise ValueError("Color must be between 0 and 255 (inclusive)")

############ PIXEL #############

def make_pixel(r, g, b):
    pixel = (r, g, b)
    return pixel


def get_r(pixel):
    return pixel[0]


def get_g(pixel):
    return pixel[1]


def get_b(pixel):
    return pixel[2]

WHITE = make_pixel(255, 255, 255)
BLACK = make_pixel(0, 0, 0)


############ IMAGE #############

def make_image(width, height):
    image = ()
    for _row in range(height):
        rows = ()
        for _col in range(width):
            rows = rows + (WHITE,)
        image = image + (rows,)
    return image


def get_pixel(image, row, col):
    return image[row][col]


def get_width(image):
    return len(image[0])


def get_height(image):
    return len(image)


def set_pixel(image, row, col, pixel):
    res = ()
    for _row in range(len(image)):
        rows = ()
        for _col in range(len(image[0])):
            if _row == row and _col == col:
                rows = rows + (pixel,)
            else:
                rows = rows + (image[_row][_col],)
        res = res + (rows,)
    return res

#Additional functions for Image

def _get_data(image):
    data = []
    for _row in range(len(image)):
        rows = []
        for _col in range(len(image[0])):
            rows.append(image[_row][_col])
        data.append(rows)
    return data

def display(image):
    """
    Display the `image` on the screen.
    """
    image_data = _get_data(image)
    drawer_display(image_data)

def save_image(image, file_path):
    """
    Save the image `image` to a file specified by `file_path`.
    """
    image_data = _get_data(image)
    drawer_save(image_data, get_width(image), get_height(image), file_path)

########### END OF API ###########
#No need to read after this line.

#########################
# Drawer Implementation #
#########################

######################################## Drawing to Screen ########################################

_master = Tk()
_master.resizable(width=FALSE, height=FALSE)
_viewport_size = 600
_canvas = Canvas(_master, width=_viewport_size, height=_viewport_size)
_canvas.pack()

def clear_all():
    _canvas.create_rectangle(
        0, 0, _viewport_size, _viewport_size, fill="white"
    )  # Clear the canvas

def _color(pixel):
    return "#%02x%02x%02x" % (get_r(pixel), get_g(pixel), get_b(pixel))

def _draw(x, y, pixel, pixel_size):
    color = _color(pixel)
    x0, y0 = x * pixel_size, y * pixel_size
    x1, y1 = x0 + pixel_size, y0 + pixel_size
    _canvas.create_rectangle(x0, y0, x1, y1, outline=color, fill=color)
    
def drawer_display(image_data):
    # Clear Tkinter window and canvas
    clear_all()
    
    # Calculate the size of each "pixel" in the display
    width, height = len(image_data[0]), len(image_data)
    pixel_size = min(_viewport_size / width, _viewport_size / height)
    _canvas.config(width=width * pixel_size, height=height * pixel_size)
    _canvas.pack()

    # Draw each pixel
    for y, row in enumerate(image_data):
        for x, pixel in enumerate(row):
            _draw(x, y, pixel, pixel_size)

############################################## File IO ############################################

def drawer_save(image_data, width, height, file_path):
    pil_img = Image.new("RGB", (width, height))
    pil_img.putdata([pix for row in image_data for pix in row])
    pil_img.save(file_path)

def drawer_load(file_path):
    img = Image.open(file_path).convert("RGB")
    h = img.height
    w = img.width
    return tuple(tuple(img.getdata())[_ * h : _ * h + h] for _ in range(w))

########### TEST DATA ############

FELIX = ((112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 163, 177), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 163, 177), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 163, 177), (70, 70, 70), (0, 0, 0), (0, 0, 0), (70, 70, 70), (255, 163, 177), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (70, 70, 70), (70, 70, 70), (70, 70, 70), (70, 70, 70), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (130, 70, 44), (130, 70, 44), (70, 70, 70), (70, 70, 70), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (229, 170, 122), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (0, 0, 0), (70, 70, 70), (70, 70, 70), (0, 0, 0), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (229, 170, 122), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (70, 70, 70), (255, 255, 255), (255, 255, 255), (70, 70, 70), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (229, 170, 122), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (229, 170, 122), (229, 170, 122), (70, 70, 70), (70, 70, 70), (70, 70, 70), (70, 70, 70), (0, 0, 0), (0, 0, 0), (0, 0, 0), (229, 170, 122), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (229, 170, 122), (255, 255, 255), (70, 70, 70), (70, 70, 70), (70, 70, 70), (70, 70, 70), (0, 0, 0), (229, 170, 122), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (229, 170, 122), (229, 170, 122), (229, 170, 122), (70, 70, 70), (255, 255, 255), (70, 70, 70), (0, 0, 0), (0, 0, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (229, 170, 122), (0, 0, 0), (229, 170, 122), (0, 0, 0), (70, 70, 70), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209))

LUNA = ((112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 126, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 126, 0), (255, 126, 0), (0, 0, 0), (0, 0, 0), (70, 70, 70), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 126, 0), (255, 126, 0), (255, 255, 255), (255, 255, 255), (70, 70, 70), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (180, 180, 180), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (180, 180, 180), (180, 180, 180), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (153, 0, 48), (255, 255, 255), (255, 255, 255), (153, 0, 48), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (180, 180, 180), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (70, 70, 70), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (180, 180, 180), (180, 180, 180), (180, 180, 180), (180, 180, 180), (255, 194, 14), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (180, 180, 180), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 194, 14), (255, 194, 14), (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (180, 180, 180), (0, 0, 0), (0, 0, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (180, 180, 180), (0, 0, 0), (255, 255, 255), (0, 0, 0), (70, 70, 70), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (255, 255, 255), (0, 0, 0), (180, 180, 180), (0, 0, 0), (255, 255, 255), (255, 255, 255), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209), (112, 154, 209))

##################################
